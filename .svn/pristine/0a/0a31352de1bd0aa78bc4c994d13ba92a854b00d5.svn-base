package com.ash.myblog23.pres;

import com.ash.myblog23.model.Comment;
import com.ash.myblog23.pres.util.JsfUtil;
import com.ash.myblog23.pres.util.JsfUtil.PersistAction;
import com.ash.myblog23.control.CommentFacade;
import com.ash.myblog23.control.PostFacade;
import com.ash.myblog23.login.beans.SessionUtils;

import java.io.Serializable;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJBException;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.inject.Inject;
import javax.servlet.http.HttpSession;

@Named("commentController")
@SessionScoped
public class CommentController implements Serializable {

    @Inject
    CommentFacade commentFacade;
    @Inject
    PostFacade postFacade;

    private List<Comment> items = null;
    private List<Comment> commentsByPostId;
    private List<Comment> itemsForPosts = null;
    private Comment selected;
    private Comment comment;
    private HttpSession session;
    private boolean hasComments = false;

    public CommentController() {
    }

    public void getCommentsByPostId(Integer postId) {
        commentsByPostId = null;
        commentsByPostId = commentFacade.findCommentByPostId(postId);
        if (commentsByPostId.size() > 0) {
            hasComments = true;
        } else {
            hasComments = false;
            commentsByPostId = null;
        }

    }

    public List<Comment> getItemsForPosts() {
        itemsForPosts = null;
        if (itemsForPosts == null) {
            session = SessionUtils.getSession();
            itemsForPosts = getFacade().findCommentByPostId((Integer) session.getAttribute("postId"));
            for (int i = 0; i < itemsForPosts.size(); i++) {
                itemsForPosts.get(i).getCommentContent();
                itemsForPosts.get(i).getCommentDate();
                itemsForPosts.get(i).getUserId().getUsername();
                itemsForPosts.get(i).getPostId().getTitle();
            }
            return itemsForPosts;
        } else {
            return null;
        }
    }

    public void setItemsForPosts(List<Comment> itemsForPosts) {
        this.itemsForPosts = itemsForPosts;
    }

    public Comment getComment() {
        return comment;
    }

    public void setComment(Comment comment) {
        this.comment = comment;
    }

    public Comment getSelected() {
        return selected;
    }

    public void setSelected(Comment selected) {
        this.selected = selected;
    }

    protected void setEmbeddableKeys() {
    }

    protected void initializeEmbeddableKey() {
    }

    private CommentFacade getFacade() {
        return commentFacade;
    }

    public Comment prepareCreate() {
        selected = new Comment();
        initializeEmbeddableKey();
        return selected;
    }

    public void create() {
        persist(PersistAction.CREATE, ResourceBundle.getBundle("/msgs_EN").getString("CommentCreated"));
        if (!JsfUtil.isValidationFailed()) {
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public void update() {
        persist(PersistAction.UPDATE, ResourceBundle.getBundle("/msgs_EN").getString("CommentUpdated"));
    }

    public void destroy() {
        persist(PersistAction.DELETE, ResourceBundle.getBundle("/msgs_EN").getString("CommentDeleted"));
        if (!JsfUtil.isValidationFailed()) {
            selected = null; // Remove selection
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public List<Comment> getItems() {
        if (items == null) {
            items = getFacade().findAll();
        }
        return items;
    }

    private void persist(PersistAction persistAction, String successMessage) {
        if (selected != null) {
            setEmbeddableKeys();
            try {
                if (persistAction != PersistAction.DELETE) {
                    getFacade().edit(selected);
                } else {
                    getFacade().remove(selected);
                }
                JsfUtil.addSuccessMessage(successMessage);
            } catch (EJBException ex) {
                String msg = "";
                Throwable cause = ex.getCause();
                if (cause != null) {
                    msg = cause.getLocalizedMessage();
                }
                if (msg.length() > 0) {
                    JsfUtil.addErrorMessage(msg);
                } else {
                    JsfUtil.addErrorMessage(ex, ResourceBundle.getBundle("/msgs_EN").getString("PersistenceErrorOccured"));
                }
            } catch (Exception ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                JsfUtil.addErrorMessage(ex, ResourceBundle.getBundle("/msgs_EN").getString("PersistenceErrorOccured"));
            }
        }
    }

    public Comment getComment(java.lang.Integer id) {
        return getFacade().find(id);
    }

    public List<Comment> getItemsAvailableSelectMany() {
        return getFacade().findAll();
    }

    public List<Comment> getItemsAvailableSelectOne() {
        session = SessionUtils.getSession();
        Integer post_id = (Integer) session.getAttribute("postId");
//        return getFacade().findAll();
        return getFacade().findCommentByPostId(post_id);
    }

    @FacesConverter(forClass = Comment.class)
    public static class CommentControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            CommentController controller = (CommentController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "commentController");
            return controller.getComment(getKey(value));
        }

        java.lang.Integer getKey(String value) {
            java.lang.Integer key;
            key = Integer.valueOf(value);
            return key;
        }

        String getStringKey(java.lang.Integer value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof Comment) {
                Comment o = (Comment) object;
                return getStringKey(o.getId());
            } else {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "object {0} is of type {1}; expected type: {2}", new Object[]{object, object.getClass().getName(), Comment.class.getName()});
                return null;
            }
        }

    }

    public HttpSession getSession() {
        return session;
    }

    public void setSession(HttpSession session) {
        this.session = session;
    }

    public CommentFacade getCommentFacade() {
        return commentFacade;
    }

    public void setCommentFacade(CommentFacade commentFacade) {
        this.commentFacade = commentFacade;
    }

    public PostFacade getPostFacade() {
        return postFacade;
    }

    public void setPostFacade(PostFacade postFacade) {
        this.postFacade = postFacade;
    }

    public boolean isHasComments() {
        return hasComments;
    }

    public void setHasComments(boolean hasComments) {
        this.hasComments = hasComments;
    }

    public List<Comment> getCommentsByPostId() {
        return commentsByPostId;
    }

    public void setCommentsByPostId(List<Comment> commentsByPostId) {
        this.commentsByPostId = commentsByPostId;
    }

}
